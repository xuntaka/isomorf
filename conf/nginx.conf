
	limit_req_zone $binary_remote_addr zone=isomorf_mvl_space_req:10m rate=10r/s;
	limit_conn_zone $binary_remote_addr zone=isomorf_mvl_space_conn:10m;

# map $http_upgrade $connection_upgrade {
# 	default upgrade;
# 	'' close;
# }

# upstream websocket {
# 	server localhost:8080;
# }

server {
	listen    *:443 ssl http2;
	listen    *:80;
	server_name isomorf.mvl.space;

	charset utf-8; # for *.html

	proxy_http_version 1.1;
	proxy_set_header   Host                $host;
	proxy_set_header   X-Real-IP           $remote_addr;
	proxy_set_header   X-Real-Host         $host;
	proxy_set_header   X-Forwarded-For     $proxy_add_x_forwarded_for;
	proxy_set_header   HTTPS               $https;
	proxy_set_header   X-Forwarded-HTTPS   $https;
	proxy_set_header   X-Forwarded-Proto   $scheme;
	proxy_set_header   Upgrade             $http_upgrade;
	proxy_set_header   Connection          "upgrade";

	access_log /home/egor.baibara/isomorf/log/nginx.access.log;
	error_log  /home/egor.baibara/isomorf/log/nginx.error.log;

	root       /home/egor.baibara/isomorf/public/;

	rewrite ^/(favicon\.ico)$ /s/i/$1; #/
	rewrite ^/(apple-touch-icon.*\.png)$ /s/i/$1; #/

	proxy_intercept_errors on;
	error_page 500 502 503 504 /502.html;
	error_page 410 /410.html;

	# Limit post body size.
	client_max_body_size 20m;

	location / {
		auth_basic "Lasciate ogni speranza, voi ch'entrate"; auth_basic_user_file /home/egor.baibara/isomorf/conf/.htpasswd;
		proxy_pass http://localhost:3001;
		proxy_read_timeout 1800;

		if ($request_method = 'OPTIONS') {
		add_header 'Access-Control-Allow-Origin' '*';
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
		add_header 'Access-Control-Max-Age' 1728000;
		add_header 'Content-Type' 'text/plain charset=UTF-8';
		add_header 'Content-Length' 0;

		return 204;
		}

	if ($request_method = 'POST') {
		add_header 'Access-Control-Allow-Origin' '*';
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
		add_header 'Access-Control-Expose-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
	}

	if ($request_method = 'GET') {
		add_header 'Access-Control-Allow-Origin' '*';
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
		add_header 'Access-Control-Expose-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
	}

			limit_req zone=isomorf_mvl_space_req burst=5;
			limit_conn isomorf_mvl_space_conn 10;
	}

	location /s/jsx/ {
		proxy_pass http://localhost:8080/;
		proxy_http_version 1.1;
		proxy_set_header Host "localhost";
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}
	location /sockjs-node/ {
		proxy_pass http://localhost:8080/sockjs-node/;
		proxy_http_version 1.1;
		proxy_set_header Host "localhost";
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
	}

	location = /502.html {
		expires epoch;
	}

	location ^~ /s/ {
		access_log off;
		expires    '30d';
		add_header Cache-Control public;
	}
}

server {
	listen    *:80;
	server_name www.isomorf.mvl.space;
	rewrite (.*) http://isomorf.mvl.space$1 permanent;
}


